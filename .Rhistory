#text = ~paste0('Location: ', ~get(input$city),
'</br>', "Time: ", my.data$time.only,
'</br>', "Temperature ", my.data$temperature),
#marker = list(colorbar = list(title = input$color)))  %>%
layout(title = "Title Here",
xaxis = x,
yaxis = y
)
thePlot <- plot_ly(mtcars,
x = ~mpg,
y = ~cyl,
colors = "PuRd",
type = 'scatter',
mode = 'lines+markers',
#hoverinfo = 'text',
#text = ~paste0('Location: ', ~get(input$city),
'</br>', "Time: ", my.data$time.only,
'</br>', "Temperature ", my.data$temperature),
#marker = list(colorbar = list(title = input$color)))  %>%
#layout(title = "Title Here",
xaxis = x,
yaxis = y
# Read in scripts
source('scripts/setup.R')
source('ui.R')
# Temperature Line Graph
thePlot <- plot_ly(mtcars,
x = ~mpg,
y = ~cyl,
colors = "PuRd",
type = 'scatter',
mode = 'lines+markers',
#hoverinfo = 'text',
#text = ~paste0('Location: ', ~get(input$city),
# '</br>', "Time: ", my.data$time.only,
# '</br>', "Temperature ", my.data$temperature),
#marker = list(colorbar = list(title = input$color)))  %>%
layout(title = "Title Here",
xaxis = x,
yaxis = y
)
trace.wind <- thePlot %>% add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers')
trace.cloud <- thePlot %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
thePlot <- plot_ly(mtcars,
x = ~mpg,
y = ~cyl,
colors = "PuRd",
type = 'scatter',
mode = 'lines+markers',
#hoverinfo = 'text',
#text = ~paste0('Location: ', ~get(input$city),
# '</br>', "Time: ", my.data$time.only,
# '</br>', "Temperature ", my.data$temperature),
#marker = list(colorbar = list(title = input$color)))  %>%
layout(title = "Title Here",
xaxis = x,
yaxis = y
)
trace.wind <- thePlot %>% add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers')
trace.cloud <- thePlot %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
# Read in scripts
source('scripts/setup.R')
source('ui.R')
# Temperature Line Graph
thePlot <- plot_ly(mtcars,
x = ~mpg,
y = ~cyl,
colors = "PuRd",
type = 'scatter',
mode = 'lines+markers'
#hoverinfo = 'text',
#text = ~paste0('Location: ', ~get(input$city),
# '</br>', "Time: ", my.data$time.only,
# '</br>', "Temperature ", my.data$temperature),
#marker = list(colorbar = list(title = input$color)))  %>%
# layout(title = "Title Here",
#        xaxis = x,
#        yaxis = y
#        )
trace.wind <- thePlot %>% add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers')
trace.cloud <- thePlot %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
# Read in scripts
source('scripts/setup.R')
source('ui.R')
# Temperature Line Graph
thePlot <- plot_ly(mtcars,
x = ~mpg,
y = ~cyl,
colors = "PuRd",
type = 'scatter',
mode = 'lines+markers')
#hoverinfo = 'text',
#text = ~paste0('Location: ', ~get(input$city),
# '</br>', "Time: ", my.data$time.only,
# '</br>', "Temperature ", my.data$temperature),
#marker = list(colorbar = list(title = input$color)))  %>%
# layout(title = "Title Here",
#        xaxis = x,
#        yaxis = y
#        )
trace.wind <- thePlot %>% add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers')
trace.cloud <- thePlot %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
print(trace.cloud)
trace.cloud <- thePlot %>% add_trace(y = ~hp, name = 'Cloud Coverage', mode = 'lines+markers')
print(trace.cloud)
# Read in scripts
source('scripts/setup.R')
source('ui.R')
my.data <-
# Temperature Line Graph
thePlot <- plot_ly(my.data,
x = ~mpg,
y = ~cyl,
colors = "PuRd",
type = 'scatter',
mode = 'lines+markers',
hoverinfo = 'text',
text = ~paste0('Location: ', ~get(input$city),
'</br>', "Time: ", my.data$time.only,
'</br>', "Temperature ", my.data$temperature)) %>%
layout(title = "Title Here",
xaxis = x,
yaxis = y
)
trace.wind <- thePlot %>% add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers')
trace.cloud <- thePlot %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
trace.both <- trace.wind %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
thePlot <- thePlot %>% add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers')
%>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
%>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
# Read in scripts
source('scripts/setup.R')
source('ui.R')
my.data <-
# Temperature Line Graph
thePlot <- plot_ly(my.data,
x = ~mpg,
y = ~cyl,
colors = "PuRd",
type = 'scatter',
mode = 'lines+markers',
hoverinfo = 'text',
text = ~paste0('Location: ', ~get(input$city),
'</br>', "Time: ", my.data$time.only,
'</br>', "Temperature ", my.data$temperature)) %>%
layout(title = "Title Here",
xaxis = x,
yaxis = y
)
trace.wind <- thePlot %>% add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers')
trace.cloud <- thePlot %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
trace.both <- trace.wind %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
thePlot <- thePlot %>% add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers')
thePlot <- thePlot %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
runApp()
# Read in scripts
source('scripts/setup.R')
source('ui.R')
my.data <-weatherData(~get(input$city), ~get(input$state), ~get(input$date))
# Temperature Line Graph
thePlot <- plot_ly(my.data,
x = ~time,
y = ~temperature,
colors = "PuRd",
type = 'scatter',
mode = 'lines+markers',
hoverinfo = 'text',
text = ~paste0('Location: ', ~get(input$city),
'</br>', "Time: ", my.data$time.only,
'</br>', "Temperature ", my.data$temperature)) %>%
layout(title = "Title Here",
xaxis = x,
yaxis = y
)
trace.wind <- thePlot %>% add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers')
trace.cloud <- thePlot %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
trace.both <- trace.wind %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
thePlot <- thePlot %>% add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers')
thePlot <- thePlot %>% add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
View(mtcars)
runApp()
View(data)
runApp()
View(data)
library(jsonlite)
library(rgeos)
library(rgdal)
library(httr)
library(plyr)
library(dplyr)
library(anytime)
# Latitude & Longitude Retrieval for API Calls
# --------------------------------------------
# Code for findLatLong and findGeoData sourced from:
# https://stackoverflow.com/posts/27868207/revisions
# Returns a data frame that contains the longitude and latitude
# for the given state and city.
# Input format: findLatLong(geog_db, "Portland", "ME")
# Ex: lon       lat       city      state
#     -70.25404 43.66186  Portland   ME
findLatLong <- function(geo_db, city, state) {
do.call(rbind.data.frame, mapply(function(x, y) {
geo_db %>% filter(city==x, state==y)
}, city, state, SIMPLIFY=FALSE))
}
# Global Variables
# Options list for states and capital cities
cities <- c("Montgomery, AL", "Juneau, AK", "Phoenix, AZ",
"Little Rock, AR", "Sacramento, CA", "Denver, CO",
"Hartford, CT", "Dover, DE", "Tallahassee, FL",
"Atlanta, GA", "Honolulu, HI", "Boise, ID", "Springfield, IL",
"Indianapolis, IN", "Des Moines, IA", "Topeka, KS", "Frankfort, KY",
"Baton Rouge, LA", "Augusta, ME", "Annapolis, MD", "Boston, MA",
"Lansing, MI", "St. Paul, MN", "Jackson, MS", "Jefferson City, MO",
"Helena, MT", "Lincoln, NE", "Carson City, NV", "Concord, NH",
"Trenton, NJ", "Santa Fe, NM", "Albany, NY", "Raleigh, NC",
"Bismarck, ND", "Columbus, OH", "Oklahoma City, OK", "Salem, OR",
"Harrisburg, PA", "Providence, RI", "Columbia, SC",
"Pierre, SD", "Nashville, TN", "Austin, TX", "Salt Lake City, UT",
"Montpelier, VT", "Richmond, VA", "Olympia, WA", "Charleston, WV",
"Madison, WI", "Cheyenne, WY"
)
# Plot list
plots <- c("Wind speed", "Cloud coverage")
# Retrieves dataset for towns and cities in Canada/US with latitudinal and longitudinal data for API calls
geo_data <- read.csv("scripts/geo_data.csv")
city <- "Portland"
state <- "ME"
day <- "28 May 2017"
# Retrieves a data frame with weather data for the specified day with the given city and state,
# with hourly time block starting from midnight of the day requested,
# continuing until midnight of the following day. Hourly time blocks start from the current system time.
# input format: weatherData("Portland", "ME", "28 May 2017"), multiple Date formats should work
# Ex: temperature     time
#     45.3690         2017-05-27 14:00:00
weatherData <- function(city, state, day) {
# Retrieve latitude and longitude for given city and state
lat.long.df <- geo_data %>% findLatLong(city, state)
longitude <- lat.long.df[,1]
latitude <- lat.long.df[,2]
# Convert given Date to UNIX format
unix.time.day <- as.numeric(as.POSIXct(anydate(day)))
# Retrieve API key from key.JSON (stored in JSON for security)
# key <- "f2816b4bb0266a96e77991a187b35d9c"
# fromJSON(txt = "access-keys.json")$weather$key
# Convert given Date to UNIX format
unix.time.day <- as.numeric(as.POSIXct(anydate(day)))
# setting params for API  call
base.url <- "https://api.darksky.net/forecast/"
weather.uri <- paste0(base.url, "f2816b4bb0266a96e77991a187b35d9c", "/", latitude, ",", longitude, ",", unix.time.day)
weather.params <- list(exclude = paste0("currently", ",", "minutely", ",", "daily", ",", "flags"))
# retrieving data from API
weather.response <- GET(weather.uri, query = weather.params)
weather.body <- content(weather.response, "text")
weather.results <- fromJSON(weather.body)
# retrieve location time zone to appropriately convert UNIX time
location.timezone <- weather.results$timezone
# Gets data sorted by hour
weather.df <- weather.results$hourly$data
weather.df <- ldply(weather.df, data.frame)
# convert UNIX time to Dates
num.time <- as.numeric(weather.df$time)
weather.df$time <- anytime(num.time, tz = location.timezone, asUTC = FALSE)
# separate date and time
weather.df$time.only <- format(as.POSIXct(weather.df$time) , format = "%H:%M:%S")
# scale up cloud cover
weather.df$cloudCover <- weather.df$cloudCover * 100
return(weather.df)
}
# test
data <- weatherData("Montgomery", "AL", "2017-05-25")
View(data)
runApp()
library(dplyr)
source("scripts/setup.r")
# How does wind speed and cloud coverage affect temp?
#
# what affects it in a positive way
# what affects it in a negetive way
#
analysis <- function(date, city, state) {
# getting data
data <- weatherData("Sacramento", "CA", "25 May 2017")
# highest temperature value
highest.temp <- summarize(data, highest = max(temperature))
# wind speed value for highest temperature
high.temp.wind.speed <- filter(data, temperature == highest.temp) %>% select(windSpeed)
# cloud coverage value for highest temperature
high.temp.cloud.coverage <- filter(data, temperature == highest.temp) %>% select(cloudCover)
# average wind speed
ave.wind.speed <- summarize(data, ave = mean(windSpeed))
# average cloud coverage
ave.cloud.coverage <- summarize(data, ave = mean(cloudCover))
# average temperature
ave.temp <- summarize(data, ave = mean(temperature))
# returning if the sent var1 values is above or below the average of that variable
aboveBelow <- function(var1, mean) {
if(var1 > mean) {
return(paste("above average"))
} else {
return(paste("below average"))
}
}
# Getting correlation between temperature and wind speed and cloud coverage
test.cor.data <- data %>% select(temperature, windSpeed, cloudCover)
correlation <- cor(test.cor.data)[,1]
ws.progress <- ""
cc.progress <- ""
# Checking for correlation between wind speed and temperature
if(correlation[,2] > 0.5) {
ws.progress <- "Wind speed and temperature have a strong positive correlation. "
} else if (correlation[,2] < -0.5) {
ws.progress <- "Wind speed and temperature have a strong inverse correlation. "
} else {
ws.progress <- "Not a strong correlation between wind speed and temperature. "
}
# Checking for correlation between wind speed and temperature
if(correlation[,3] > 0.5) {
cc.progress <- "Cloud coverage and temperature have a strong positive correlation."
} else if (correlation[,3] < -0.5) {
cc.progress <- "Cloud coverage and temperature have a strong inverse correlation."
} else {
cc.progress <- "Not a strong correlation between cloud coverage and temperature."
}
# combining the actual analysis
results <- paste0("On ", date, ", in the city of ", city, ", ", state, " the highest temperature reached was ", highest.temp, " Farenheiegt. The wind
speed was around ", high.temp.wind.speed., " mph and cloud coverage was about ", high.temp.cloud.coverage, ". This wind speed is ",
aboveBelow(high.temp.wind.speed, ave.wind.speed), " and the cloud coverage is ", aboveBelow(high.temp.cloud.coverage, ave.cloud.coverage),
". The average temperature was around ", ave.temp, ", the average cloud coverage was around ", ave.cloud.coverage,
" and the wind speed was around ", ave.wind.speed, ". " ws.progress, cc.progress)
return(results)
}
library(dplyr)
source("scripts/setup.r")
# How does wind speed and cloud coverage affect temp?
#
# what affects it in a positive way
# what affects it in a negetive way
#
analysis <- function(date, city, state) {
# getting data
data <- weatherData("Sacramento", "CA", "25 May 2017")
# highest temperature value
highest.temp <- summarize(data, highest = max(temperature))
# wind speed value for highest temperature
high.temp.wind.speed <- filter(data, temperature == highest.temp) %>% select(windSpeed)
# cloud coverage value for highest temperature
high.temp.cloud.coverage <- filter(data, temperature == highest.temp) %>% select(cloudCover)
# average wind speed
ave.wind.speed <- summarize(data, ave = mean(windSpeed))
# average cloud coverage
ave.cloud.coverage <- summarize(data, ave = mean(cloudCover))
# average temperature
ave.temp <- summarize(data, ave = mean(temperature))
# returning if the sent var1 values is above or below the average of that variable
aboveBelow <- function(var1, mean) {
if(var1 > mean) {
return(paste("above average"))
} else {
return(paste("below average"))
}
}
# Getting correlation between temperature and wind speed and cloud coverage
test.cor.data <- data %>% select(temperature, windSpeed, cloudCover)
correlation <- cor(test.cor.data)[,1]
ws.progress <- ""
cc.progress <- ""
# Checking for correlation between wind speed and temperature
if(correlation[,2] > 0.5) {
ws.progress <- "Wind speed and temperature have a strong positive correlation. "
} else if (correlation[,2] < -0.5) {
ws.progress <- "Wind speed and temperature have a strong inverse correlation. "
} else {
ws.progress <- "Not a strong correlation between wind speed and temperature. "
}
# Checking for correlation between wind speed and temperature
if(correlation[,3] > 0.5) {
cc.progress <- "Cloud coverage and temperature have a strong positive correlation."
} else if (correlation[,3] < -0.5) {
cc.progress <- "Cloud coverage and temperature have a strong inverse correlation."
} else {
cc.progress <- "Not a strong correlation between cloud coverage and temperature."
}
# combining the actual analysis
results <- paste0("On ", date, ", in the city of ", city, ", ", state, " the highest temperature reached was ", highest.temp, " Farenheiegt. The wind
speed was around ", high.temp.wind.speed., " mph and cloud coverage was about ", high.temp.cloud.coverage, ". This wind speed is ",
aboveBelow(high.temp.wind.speed, ave.wind.speed), " and the cloud coverage is ", aboveBelow(high.temp.cloud.coverage, ave.cloud.coverage),
". The average temperature was around ", ave.temp, ", the average cloud coverage was around ", ave.cloud.coverage,
" and the wind speed was around ", ave.wind.speed, ". ", ws.progress, cc.progress)
return(results)
}
test.cor.data <- data %>% select(temperature, windSpeed, cloudCover)
View(test.cor.data)
runApp()
# About section text
about <- "This is a project created by Mara Childs, Isabel Giang, Nikhila Iyer, and Esha More for Informatics 201
at the University of Washington. After living in the grey Seattle weather for so long, we were curious
about how the weather affects tweeting habits. We wanted to know if and how the weather affects
the number of tweets.
In this web application, we leveraged the Twitter Streaming API and the Dark Sky Weather API to chart
the temperatures of capital cities over time and the number of geotagged tweets over time. We are only
able to grab the last 10,000 tweets, max, due to the Twitter API request runtime, and these are graphed
from the latest 10,000 rather than equally distributed throughout the date range. Findings are summarized
in the Insights tab.
Questions? Reach out at michilds@uw.edu."
runApp()
# server.R
# Libraries
library(dplyr)
library(rgeos)
library(shiny)
library(plotly)
library(httr)
library(stringr)
library(rjson)
library(jsonlite)
library(anytime)
library(shinythemes)
# Scripts
source('scripts/setup.R')
source('scripts/analysis.R')
source('scripts/about.R')
# shinyServer
shinyServer(function(input, output) {
selectData <- reactive({
location <- str_split_fixed(input$city, ", ", 2)
my.data <- weatherData(location[,1], location[,2], input$date)
return(my.data)
})
#Plot
output$mainPlot <- renderPlotly({
x <- list(
title = "Hour"
)
thePlot <- plot_ly(selectData(),
x = ~time,
y = ~temperature,
colors = "PuRd",
type = 'scatter',
mode = 'lines+markers',
hoverinfo = 'text',
text = ~paste0('Location: ', ~get(input$city),
'</br>', "Time: ", selectData()$time.only,
'</br>', "Temperature ", selectData()$temperature)) %>%
layout(title = paste("Weather in", input$city, "on", input$date),
xaxis = x) %>%
add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers') %>%
add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
plotly_build(thePlot)
})
# Text rendering for about and insights
output$about <- renderText({about})
output$insights <- renderText({
analysis(location[,1], location[,2], input$date)
})
})
# server.R
# Libraries
library(dplyr)
library(rgeos)
library(shiny)
library(plotly)
library(httr)
library(stringr)
library(rjson)
library(jsonlite)
library(anytime)
library(shinythemes)
# Scripts
source('scripts/setup.R')
source('scripts/analysis.R')
source('scripts/about.R')
# shinyServer
shinyServer(function(input, output) {
selectData <- reactive({
location <- str_split_fixed(input$city, ", ", 2)
my.data <- weatherData(location[,1], location[,2], input$date)
return(my.data)
})
#Plot
output$mainPlot <- renderPlotly({
x <- list(
title = "Hour"
)
thePlot <- plot_ly(selectData(),
x = ~time,
y = ~temperature,
colors = "PuRd",
type = 'scatter',
mode = 'lines+markers',
hoverinfo = 'text',
text = ~paste0('Location: ', ~get(input$city),
'</br>', "Time: ", selectData()$time.only,
'</br>', "Temperature ", selectData()$temperature)) %>%
layout(title = paste("Weather in", input$city, "on", input$date),
xaxis = x) %>%
add_trace(y = ~windSpeed, name = 'Wind Speed', mode = 'lines+markers') %>%
add_trace(y = ~cloudCover, name = 'Cloud Coverage', mode = 'lines+markers')
plotly_build(thePlot)
})
# Text rendering for about and insights
output$about <- renderText({about})
output$insights <- renderText({
analysis(input$date, location[,1], location[,2])
})
})
runApp()
analysis("25 May 2017", "Sacramento", "CA")
analysis("Sacramento", "CA", "25 May 2017")
analysis("25 May 2017", "Sacramento", "CA")
runApp()
runApp()
